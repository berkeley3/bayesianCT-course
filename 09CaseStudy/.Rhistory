pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
mD=NULL
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
pred.stage2=function(piA, piD,thetau, lambda2, gamma2, nD=10, r1, n1, n=100){
mD2=function(piD, r1, n1, n){
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
md=NULL
for (s in (r1+1):n){
for(i in (r1+1):min(n1,s)){
a[i-r1]=choose(n1,i)*choose(n-n1, s-i)}
md[s-r1]=beta(alphaD+s, betaD+n-s)*sum(a)}
md
}
#
#     const=function(s){
#       a=0
#       for(i in (r1+1):min(n1,s))
#         a=a+choose(n1,i)*choose(n-n1, s-i)
#       res=beta(alphaD+s, betaD+n-s)*a
#       res
#     }
#     denom=NULL
#     for(k in (r1+1):n)
#       denom[k-r1]=const(k)
#     denom=sum(denom)
#
#     res=num/denom
#    res
#   }
mD3=function(piA, piD,thetau, lambda2, nD=10, r1, n1, n=100){
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
mD=NULL
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res}
if(n<n1)
{print('choose n greater than n1')}else{
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
if (m<gamma2){
print('a sensible sample size does not exist')}else{
while(m>=gamma2 & n>n1){
n=n-1
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
r=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$r}}
if(n==n1){
print('the condition is already satisfied')
}else{
res=list(n=n+1, r=r-1, mD=m)
res}}
}
pred.stage2=function(piA, piD,thetau, lambda2, gamma2, nD=10, r1, n1, n=100){
mD2=function(piD, r1, n1, n){
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
md=NULL
for (s in (r1+1):n){
for(i in (r1+1):min(n1,s)){
a[i-r1]=choose(n1,i)*choose(n-n1, s-i)}
md[s-r1]=beta(alphaD+s, betaD+n-s)*sum(a)}
md
}
#
#     const=function(s){
#       a=0
#       for(i in (r1+1):min(n1,s))
#         a=a+choose(n1,i)*choose(n-n1, s-i)
#       res=beta(alphaD+s, betaD+n-s)*a
#       res
#     }
#     denom=NULL
#     for(k in (r1+1):n)
#       denom[k-r1]=const(k)
#     denom=sum(denom)
#
#     res=num/denom
#    res
#   }
mD3=function(piA, piD,thetau, lambda2, nD=10, r1, n1, n=100){
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
mD=NULL
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res}
if(n<n1)
{print('choose n greater than n1')}else{
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
if (m<gamma2){
print('a sensible sample size does not exist')}else{
while(m>=gamma2 & n>n1){
n=n-1
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
r=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$r}}
if(n==n1){
print('the condition is already satisfied')
}else{
res=list(n=n+1, r=r-1, mD=m)
res}}
}
pred.stage2(piA=piA, piD=piD, thetau=thetau, lambda2=lambda2, gamma2=gamma2, r1=r1, n1=n1, nD=10, n=100)
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
mD3=function(piA, piD,thetau, lambda2, nD=10, r1, n1, n=100){
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
mD=NULL
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res}
mD3=function(piA, piD,thetau, lambda2, nD=10, r1, n1, n=100){
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
mD=NULL
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res}
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$r
pred.stage2=function(piA, piD,thetau, lambda2, gamma2, nD=10, r1, n1, n=100){
mD2=function(piD, r1, n1, n){
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
md=NULL
for (s in (r1+1):n){
for(i in (r1+1):min(n1,s)){
a[i-r1]=choose(n1,i)*choose(n-n1, s-i)}
md[s-r1]=beta(alphaD+s, betaD+n-s)*sum(a)}
md
}
#
#     const=function(s){
#       a=0
#       for(i in (r1+1):min(n1,s))
#         a=a+choose(n1,i)*choose(n-n1, s-i)
#       res=beta(alphaD+s, betaD+n-s)*a
#       res
#     }
#     denom=NULL
#     for(k in (r1+1):n)
#       denom[k-r1]=const(k)
#     denom=sum(denom)
#
#     res=num/denom
#    res
#   }
mD3=function(piA, piD,thetau, lambda2, nD=10, r1, n1, n=100){
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
mD=NULL
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res}
if(n<n1)
{print('choose n greater than n1')}else{
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
if (m<gamma2){
print('a sensible sample size does not exist')}else{
while(m>=gamma2 & n>n1){
n=n-1
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
r=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$r}}
if(n==n1){
print('the condition is already satisfied')
}else{
res=list(n=n+1, r=r-1, mD=m)
res}}
}
pred.stage2(piA=piA, piD=piD, thetau=thetau, lambda2=lambda2, gamma2=gamma2, r1=r1, n1=n1, nD=10, n=100)
r
r1
n
r1
md[(r-r1):(n-r1)]
sum(md)
md[(r-r1):(n-r1)]/sum(md)
pred.stage1=function(piA, piD,thetau, lambda1, gamma1, nD=10, n1=100){
mD=function(piA, piD,thetau, lambda1, nD, n1=100){
alphaA=piA+1
betaA=1-piA+1
pn1=NULL
for(s1 in 0:n1)
pn1[s1+1]=pbeta(thetau,s1+alphaA, n1-s1+betaA, lower.tail=F)
r1=match(1,(pn1>=lambda1)*1)-1
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
mD=NULL
for(i in r1:n1)
mD[i-r1+1]=choose(n1,i)*beta(alphaD+i, betaD+n1-i)/beta(alphaD, betaD)
m=sum(mD)
res=list(r1=r1,mD=m)
res}
m=mD(piA, piD,thetau, lambda1, nD, n1)$mD
if (m<gamma1){
print('a sensible sample size does not exist')}else{
while(m>=gamma1 & n1>0){
n1=n1-1
m=mD(piA, piD,thetau, lambda1, nD, n1)$mD
r1=mD(piA, piD,thetau, lambda1, nD, n1)$r1}}
if(n1==0){
print('the condition is already satisfied')
}else{
res=list(n1=n1+1, r1=r1-1, mD=m)
res}
}
lambda1=0.7
gamma1=0.6
thetau=0.2
piA=thetau-0.1
piD=thetau+0.1
stage1=pred.stage1(piA=piA, piD=piD, thetau=thetau, lambda1=lambda1, gamma1=gamma1, nD=10)
stage1
r1=stage1$r1
n1=stage1$n1
lambda2=0.7
gamma2=0.9
mD2=function(piD, r1, n1, n){
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
md=NULL
for (s in (r1+1):n){
for(i in (r1+1):min(n1,s)){
a[i-r1]=choose(n1,i)*choose(n-n1, s-i)}
md[s-r1]=beta(alphaD+s, betaD+n-s)*sum(a)}
md
}
mD3=function(piA, piD,thetau, lambda2, nD=10, r1, n1, n=100){
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res
}
if(n<n1)
{print('choose n greater than n1')}else{
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
if (m<gamma2){
print('a sensible sample size does not exist')}else{
while(m>=gamma2 & n>n1){
n=n-1
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
r=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$r}}
if(n==n1){
print('the condition is already satisfied')
}else{
res=list(n=n+1, r=r-1, mD=m)
res}
}
n
n=50
r1
n1
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res
n=n-1
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res
n=n-1
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)
n=n-1
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)
n=n-1
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)
n
n=37
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n=n)
n=n-1
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n=n)
n
n=35
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n=n)
n=20
mD3(piA, piD,thetau, lambda2, nD, r1, n1, n=n)
mD2(piD, 2, 10, 40)
40-2
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
md=NULL
for (s in (r1+1):n){
for(i in (r1+1):min(n1,s)){
a[i-r1]=choose(n1,i)*choose(n-n1, s-i)}
md[s-r1]=beta(alphaD+s, betaD+n-s)*sum(a)}
md
a
s=r1+1
i in (r1+1):min(n1,s)
i in (r1+1):min(n1,s)
(i in (r1+1):min(n1,s))
i in 1:19
for(i in 1:10)
pred.stage1=function(piA, piD,thetau, lambda1, gamma1, nD=10, n1=100){
mD=function(piA, piD,thetau, lambda1, nD, n1=100){
alphaA=piA+1
betaA=1-piA+1
pn1=NULL
for(s1 in 0:n1)
pn1[s1+1]=pbeta(thetau,s1+alphaA, n1-s1+betaA, lower.tail=F)
r1=match(1,(pn1>=lambda1)*1)-1
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
mD=NULL
for(i in r1:n1)
mD[i-r1+1]=choose(n1,i)*beta(alphaD+i, betaD+n1-i)/beta(alphaD, betaD)
m=sum(mD)
res=list(r1=r1,mD=m)
res}
m=mD(piA, piD,thetau, lambda1, nD, n1)$mD
if (m<gamma1){
print('a sensible sample size does not exist')}else{
while(m>=gamma1 & n1>0){
n1=n1-1
m=mD(piA, piD,thetau, lambda1, nD, n1)$mD
r1=mD(piA, piD,thetau, lambda1, nD, n1)$r1}}
if(n1==0){
print('the condition is already satisfied')
}else{
res=list(n1=n1+1, r1=r1-1, mD=m)
res}
}
pred.stage2=function(piA, piD,thetau, lambda2, gamma2, nD=10, r1, n1, n=100){
mD2=function(piD, r1, n1, n){
alphaD=nD*piD+1
betaD=nD*(1-piD)+1
md=NULL
for (s in (r1+1):n){
for(i in (r1+1):min(n1,s)){
a[i-r1]=choose(n1,i)*choose(n-n1, s-i)}
md[s-r1]=beta(alphaD+s, betaD+n-s)*sum(a)}
md
}
#
#     const=function(s){
#       a=0
#       for(i in (r1+1):min(n1,s))
#         a=a+choose(n1,i)*choose(n-n1, s-i)
#       res=beta(alphaD+s, betaD+n-s)*a
#       res
#     }
#     denom=NULL
#     for(k in (r1+1):n)
#       denom[k-r1]=const(k)
#     denom=sum(denom)
#
#     res=num/denom
#    res
#   }
mD3=function(piA, piD,thetau, lambda2, nD=10, r1, n1, n=100){
alphaA=piA+1
betaA=1-piA+1
pn=NULL
for(s in (r1+1):n)
pn[s-r1]=pbeta(thetau,s+alphaA, n-s+betaA, lower.tail=F)
r=match(TRUE,pn>=lambda2)+r1
#     alphaD=nD*piD+1
#     betaD=nD*(1-piD)+1
md=mD2(piD, r1, n1,n)
m=md[(r-r1):(n-r1)]/sum(md)
m=sum(m, na.rm=T)
res=list(r=r,mD=m)
res
}
if(n<n1)
{print('choose n greater than n1')}else{
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$mD
if (m<gamma2){
print('a sensible sample size does not exist')}else{
while(m>=gamma2 & n>n1){
n=n-1
m=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n=n)$mD
r=mD3(piA, piD,thetau, lambda2, nD, r1, n1, n)$r}}
if(n==n1){
print('the condition is already satisfied')
}else{
res=list(n=n+1, r=r-1, mD=m)
res}}
}
lambda1=0.7
gamma1=0.6
thetau=0.2
piA=thetau-0.1
piD=thetau+0.1
stage1=pred.stage1(piA=piA, piD=piD, thetau=thetau, lambda1=lambda1, gamma1=gamma1, nD=10)
r1=stage1$r1
n1=stage1$n1
lambda2=0.7
gamma2=0.9
pred.stage2(piA=piA, piD=piD, thetau=thetau, lambda2=lambda2, gamma2=gamma2, r1=r1, n1=n1, nD=10, n=100)
(log(100)+log(200)+log(300)+log(400)+log(500)+log(600))/6
log(200)-(log(100)+log(200)+log(300)+log(400)+log(500)+log(600))/6
log(500)-(log(100)+log(200)+log(300)+log(400)+log(500)+log(600))/6
log(600)-(log(100)+log(200)+log(300)+log(400)+log(500)+log(600))/6
log(100)-(log(100)+log(200)+log(300)+log(400)+log(500)+log(600))/6
library(bcrm)
?"bcrm"
dose = c(100, 200, 300, 400, 500, 600)
p.tox0 = c(0.15, 0.25, 0.40, 0.6, 0.75, 0.85)
data = data.frame(patient=1:3, dose=rep(2,3), tox=rep(0,3))
target.tox = 0.25
bcrm(stop = list(nmax=24, precision=c(0.16,0.6)),
data = data,
p.tox0 = p.tox0,
dose = dose,
ff = "logit1",
prior.alpha = list(3, a=1, b=0.75),
target.tox = target.tox,
sdose.calculate = "mean",
constrain = FALSE
)
library(LearnBayes)
beta.par <- beta.select(list(p=0.5, x=0.2), list(p=0.75, x=.3))
print(beta.par)
beta.prior <- beta.select(list(p=0.5, x=0.2), list(p=0.75, x=.3))
triplot(beta.prior, c(3,0))
beta.prior = beta.select(list(p=0.5, x=0.2), list(p=0.75, x=.3))
beta.post = beta.prior + c(3,0)
post.sample = rbeta(1000, beta.post[1], beta.post[2])
quantile(post.sample, c(0.05, 0.95))
?discint
install.packages("clinfun")
library(clinfun)
ph2simon(0.05, 0.2,0.05, 0.2)
library(rmarkdown)
render('07PredictiveSingleThresholdDesign.Rmd')
setwd("C:/Users/berkeley/OneDrive/BaySS/Bayesian Clinical Trials course/Bayesian Clinical Trials - GIT/07PredictiveSingleThresholdDesign")
render('07PredictiveSingleThresholdDesign.Rmd')
setwd("C:/Users/berkeley/OneDrive/BaySS/Bayesian Clinical Trials course/Bayesian Clinical Trials - GIT/08SSizeBinomialProportion")
render('08SizeBinomialProportion.Rmd')
setwd("C:/Users/berkeley/OneDrive/BaySS/Bayesian Clinical Trials course/Bayesian Clinical Trials - GIT/09CaseStudy")
render('09CaseStudy.Rmd')
install.packages("SampleSizeProportions")
render('09CaseStudy.Rmd')
render('09CaseStudy.Rmd')
render('09CaseStudy.Rmd')
